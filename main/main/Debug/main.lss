
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001cd  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f3  00000000  00000000  00000521  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c3  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000164  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000135  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000ac5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
unsigned int Temp = 1500;
void main(void)
{	
	
	// Port LCD
	DDRA  |= (1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (0<<DDA1) | (0<<DDA0);
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	8c 6f       	ori	r24, 0xFC	; 252
  96:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (0<<PINA7) | (0<<PINA6) | (0<<PINA5) | (0<<PINA4) | (0<<PINA3) | (0<<PINA2) | (0<<PINA1) | (0<<PINA0);
  98:	8b b3       	in	r24, 0x1b	; 27
  9a:	8b bb       	out	0x1b, r24	; 27
	
	// Port Button
	DDRB = 0x00;
  9c:	17 ba       	out	0x17, r1	; 23
	
	// Port Motor DC
	DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (1<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
  9e:	8a e2       	ldi	r24, 0x2A	; 42
  a0:	81 bb       	out	0x11, r24	; 17
	PORTD= 0x00;
  a2:	12 ba       	out	0x12, r1	; 18
	
	// khai bao timer2 mode Normal chia 1024
	ASSR=0<<AS2;
  a4:	12 bc       	out	0x22, r1	; 34
	TCCR2 |= (1<<CS22) | (1<<CS21) | (1<<CS20);
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x06;
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	84 bd       	out	0x24, r24	; 36
	OCR2=0x00;
  b0:	13 bc       	out	0x23, r1	; 35
	
	// khai bao fast pwm cua timer 1  co tran ICR1 chu ki m?i sung là 2ms
	TCCR1A |=(1<<COM1A1)  | (1<<WGM11) | (0<<WGM10);
  b2:	8f b5       	in	r24, 0x2f	; 47
  b4:	82 68       	ori	r24, 0x82	; 130
  b6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS10);
  b8:	8e b5       	in	r24, 0x2e	; 46
  ba:	89 61       	ori	r24, 0x19	; 25
  bc:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
  be:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
  c0:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x3E;
  c2:	8e e3       	ldi	r24, 0x3E	; 62
  c4:	87 bd       	out	0x27, r24	; 39
	ICR1L=0x7F;
  c6:	8f e7       	ldi	r24, 0x7F	; 127
  c8:	86 bd       	out	0x26, r24	; 38
	OCR1AH=0x00;
  ca:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x00;
  cc:	1a bc       	out	0x2a, r1	; 42
	TIMSK|= (1<<TOIE2) | (1<<TOIE0);
  ce:	89 b7       	in	r24, 0x39	; 57
  d0:	81 64       	ori	r24, 0x41	; 65
  d2:	89 bf       	out	0x39, r24	; 57
	MCUCSR=(0<<ISC2);
  d4:	14 be       	out	0x34, r1	; 52
	GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	8a bf       	out	0x3a, r24	; 58
	sei();
  da:	78 94       	sei
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x4a>

000000de <__vector_4>:
	{
		//
	}
}
ISR(TIMER2_OVF_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	TCCR2=(0<<CS22) | (0<<CS21) | (0<<CS20);
  f0:	15 bc       	out	0x25, r1	; 37
	if(CountT2 >=5)
  f2:	80 91 62 00 	lds	r24, 0x0062
  f6:	90 91 63 00 	lds	r25, 0x0063
  fa:	05 97       	sbiw	r24, 0x05	; 5
  fc:	08 f4       	brcc	.+2      	; 0x100 <__vector_4+0x22>
  fe:	9c c0       	rjmp	.+312    	; 0x238 <__vector_4+0x15a>
	{
		CountT2=0;
 100:	10 92 63 00 	sts	0x0063, r1
 104:	10 92 62 00 	sts	0x0062, r1
		
		if(((PINB & (1 << button_up)) == 0) && (PORTD == (1 << PIND1)))
 108:	b1 99       	sbic	0x16, 1	; 22
 10a:	2e c0       	rjmp	.+92     	; 0x168 <__vector_4+0x8a>
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	59 f5       	brne	.+86     	; 0x168 <__vector_4+0x8a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	97 e2       	ldi	r25, 0x27	; 39
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <__vector_4+0x38>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <__vector_4+0x3e>
 11c:	00 00       	nop
		{
			_delay_ms(5);
			if(((PINB & (1 << button_up)) == 0) && (PORTD == (1 << PIND1)))
 11e:	b1 99       	sbic	0x16, 1	; 22
 120:	7f c0       	rjmp	.+254    	; 0x220 <__vector_4+0x142>
 122:	82 b3       	in	r24, 0x12	; 18
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	09 f0       	breq	.+2      	; 0x12a <__vector_4+0x4c>
 128:	7b c0       	rjmp	.+246    	; 0x220 <__vector_4+0x142>
			{
				while(((PINB & (1 << button_up)) == 0) && (PORTD == (1 << PIND1)));
 12a:	b1 99       	sbic	0x16, 1	; 22
 12c:	03 c0       	rjmp	.+6      	; 0x134 <__vector_4+0x56>
 12e:	82 b3       	in	r24, 0x12	; 18
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	d9 f3       	breq	.-10     	; 0x12a <__vector_4+0x4c>
				Speed += Temp;
 134:	20 91 60 00 	lds	r18, 0x0060
 138:	30 91 61 00 	lds	r19, 0x0061
 13c:	80 91 64 00 	lds	r24, 0x0064
 140:	90 91 65 00 	lds	r25, 0x0065
 144:	82 0f       	add	r24, r18
 146:	93 1f       	adc	r25, r19
				if(Speed>=15999) Speed=15999;
 148:	8f 37       	cpi	r24, 0x7F	; 127
 14a:	2e e3       	ldi	r18, 0x3E	; 62
 14c:	92 07       	cpc	r25, r18
 14e:	28 f4       	brcc	.+10     	; 0x15a <__vector_4+0x7c>
		{
			_delay_ms(5);
			if(((PINB & (1 << button_up)) == 0) && (PORTD == (1 << PIND1)))
			{
				while(((PINB & (1 << button_up)) == 0) && (PORTD == (1 << PIND1)));
				Speed += Temp;
 150:	90 93 65 00 	sts	0x0065, r25
 154:	80 93 64 00 	sts	0x0064, r24
 158:	63 c0       	rjmp	.+198    	; 0x220 <__vector_4+0x142>
				if(Speed>=15999) Speed=15999;
 15a:	8f e7       	ldi	r24, 0x7F	; 127
 15c:	9e e3       	ldi	r25, 0x3E	; 62
 15e:	90 93 65 00 	sts	0x0065, r25
 162:	80 93 64 00 	sts	0x0064, r24
 166:	5c c0       	rjmp	.+184    	; 0x220 <__vector_4+0x142>
			}
		}
		else if(((PINB & (1 << button_dowm)) == 0) && (PORTD == (1 << PIND1)))
 168:	b2 99       	sbic	0x16, 2	; 22
 16a:	3c c0       	rjmp	.+120    	; 0x1e4 <__vector_4+0x106>
 16c:	82 b3       	in	r24, 0x12	; 18
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	c9 f5       	brne	.+114    	; 0x1e4 <__vector_4+0x106>
		{
			if(Speed >= 1500)
 172:	80 91 64 00 	lds	r24, 0x0064
 176:	90 91 65 00 	lds	r25, 0x0065
 17a:	8c 3d       	cpi	r24, 0xDC	; 220
 17c:	95 40       	sbci	r25, 0x05	; 5
 17e:	58 f1       	brcs	.+86     	; 0x1d6 <__vector_4+0xf8>
 180:	8f e0       	ldi	r24, 0x0F	; 15
 182:	97 e2       	ldi	r25, 0x27	; 39
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <__vector_4+0xa6>
 188:	00 c0       	rjmp	.+0      	; 0x18a <__vector_4+0xac>
 18a:	00 00       	nop
			{
				_delay_ms(5);
				if(((PINB & (1 << button_dowm)) == 0) && (PORTD == (1 << PIND1)))
 18c:	b2 99       	sbic	0x16, 2	; 22
 18e:	48 c0       	rjmp	.+144    	; 0x220 <__vector_4+0x142>
 190:	82 b3       	in	r24, 0x12	; 18
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	09 f0       	breq	.+2      	; 0x198 <__vector_4+0xba>
 196:	44 c0       	rjmp	.+136    	; 0x220 <__vector_4+0x142>
				{
					while(((PINB & (1 << button_dowm)) == 0) && (PORTD == (1 << PIND1)));
 198:	b2 99       	sbic	0x16, 2	; 22
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <__vector_4+0xc4>
 19c:	82 b3       	in	r24, 0x12	; 18
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	d9 f3       	breq	.-10     	; 0x198 <__vector_4+0xba>
					Speed -= Temp;
 1a2:	80 91 64 00 	lds	r24, 0x0064
 1a6:	90 91 65 00 	lds	r25, 0x0065
 1aa:	20 91 60 00 	lds	r18, 0x0060
 1ae:	30 91 61 00 	lds	r19, 0x0061
 1b2:	82 1b       	sub	r24, r18
 1b4:	93 0b       	sbc	r25, r19
					if(Speed <= 500) Speed = 1500;
 1b6:	85 3f       	cpi	r24, 0xF5	; 245
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	92 07       	cpc	r25, r18
 1bc:	28 f0       	brcs	.+10     	; 0x1c8 <__vector_4+0xea>
			{
				_delay_ms(5);
				if(((PINB & (1 << button_dowm)) == 0) && (PORTD == (1 << PIND1)))
				{
					while(((PINB & (1 << button_dowm)) == 0) && (PORTD == (1 << PIND1)));
					Speed -= Temp;
 1be:	90 93 65 00 	sts	0x0065, r25
 1c2:	80 93 64 00 	sts	0x0064, r24
 1c6:	2c c0       	rjmp	.+88     	; 0x220 <__vector_4+0x142>
					if(Speed <= 500) Speed = 1500;
 1c8:	8c ed       	ldi	r24, 0xDC	; 220
 1ca:	95 e0       	ldi	r25, 0x05	; 5
 1cc:	90 93 65 00 	sts	0x0065, r25
 1d0:	80 93 64 00 	sts	0x0064, r24
 1d4:	25 c0       	rjmp	.+74     	; 0x220 <__vector_4+0x142>
				}
			}
			else Speed = 1500;
 1d6:	8c ed       	ldi	r24, 0xDC	; 220
 1d8:	95 e0       	ldi	r25, 0x05	; 5
 1da:	90 93 65 00 	sts	0x0065, r25
 1de:	80 93 64 00 	sts	0x0064, r24
 1e2:	1e c0       	rjmp	.+60     	; 0x220 <__vector_4+0x142>
			
		}
		else if((PINB & (1 << button_start)) == 0)
 1e4:	b0 99       	sbic	0x16, 0	; 22
 1e6:	1c c0       	rjmp	.+56     	; 0x220 <__vector_4+0x142>
 1e8:	8f e0       	ldi	r24, 0x0F	; 15
 1ea:	97 e2       	ldi	r25, 0x27	; 39
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <__vector_4+0x10e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <__vector_4+0x114>
 1f2:	00 00       	nop
		{
			_delay_ms(5);
			if((PINB & (1 << button_start)) == 0)
 1f4:	b0 99       	sbic	0x16, 0	; 22
 1f6:	14 c0       	rjmp	.+40     	; 0x220 <__vector_4+0x142>
			{
				while((PINB & (1 << button_start)) == 0);
 1f8:	b0 9b       	sbis	0x16, 0	; 22
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <__vector_4+0x11a>
				tbi(PORTD, 1);
 1fc:	92 b3       	in	r25, 0x12	; 18
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	89 27       	eor	r24, r25
 202:	82 bb       	out	0x12, r24	; 18
				if(PORTD == (0 << PIND1)){
 204:	82 b3       	in	r24, 0x12	; 18
 206:	81 11       	cpse	r24, r1
 208:	05 c0       	rjmp	.+10     	; 0x214 <__vector_4+0x136>
					Speed = 0;
 20a:	10 92 65 00 	sts	0x0065, r1
 20e:	10 92 64 00 	sts	0x0064, r1
 212:	06 c0       	rjmp	.+12     	; 0x220 <__vector_4+0x142>
				}
				else{
					Speed = 1500;
 214:	8c ed       	ldi	r24, 0xDC	; 220
 216:	95 e0       	ldi	r25, 0x05	; 5
 218:	90 93 65 00 	sts	0x0065, r25
 21c:	80 93 64 00 	sts	0x0064, r24
		/***
		On_Off(Speed);
		Speed_up(Speed, Temp);
		Speed_down(Speed, Temp);
		***/
		OCR1AH= Speed >>8 ;
 220:	80 91 65 00 	lds	r24, 0x0065
 224:	8b bd       	out	0x2b, r24	; 43
		OCR1AL= Speed && 0xFF ;
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	80 91 64 00 	lds	r24, 0x0064
 22c:	90 91 65 00 	lds	r25, 0x0065
 230:	89 2b       	or	r24, r25
 232:	09 f4       	brne	.+2      	; 0x236 <__vector_4+0x158>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	2a bd       	out	0x2a, r18	; 42
		
		
	}
	CountT2++;
 238:	80 91 62 00 	lds	r24, 0x0062
 23c:	90 91 63 00 	lds	r25, 0x0063
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	90 93 63 00 	sts	0x0063, r25
 246:	80 93 62 00 	sts	0x0062, r24
	TCNT2=0x00;
 24a:	14 bc       	out	0x24, r1	; 36
	TCCR2=(1<<CS22) | (1<<CS21) | (1<<CS20);
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	85 bd       	out	0x25, r24	; 37
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
